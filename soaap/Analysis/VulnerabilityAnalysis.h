#ifndef SOAAP_ANALYSIS_PASTVULNERABILITYANALYSIS_H
#define SOAAP_ANALYSIS_PASTVULNERABILITYANALYSIS_H

#include "Analysis/Analysis.h"
#include "OS/Sandbox/SandboxPlatform.h"

namespace soaap {

  class VulnerabilityAnalysis : public Analysis {
    public:
      VulnerabilityAnalysis(FunctionSet& privFuncs, shared_ptr<SandboxPlatform>& platform) : 
        privilegedFuncs(privFuncs), sandboxPlatform(platform) { }
      virtual void doAnalysis(Module& M, SandboxVector& sandboxes);
    
    private:
      FunctionSet privilegedFuncs;
      SmallVector<CallInst*,16> pastVulnAnnotatedPoints;
      FunctionVector pastVulnAnnotatedFuncs;
      FunctionSet vulnerableFuncs;
      map<Function*,StringSet> funcToCVEs;
      FunctionVector vulnerableVendorFuncs;
      shared_ptr<SandboxPlatform> sandboxPlatform;
      map<Function*,pair<string,int> > funcToSourceLoc;
  
      void findPastVulnerabilityAnnotations(Module& M);
      void findVulnerableVendorFuncs(Module& M);
      void findVulnerableLibFuncs(Module& M);
      void checkLeakedRights(Module& M, SandboxVector& sandboxes); 
      string stringifyStringSet(StringSet& strings);
      pair<string,int> findFuncDeclaration(Module& M, Function* F);
  };

}

#endif
