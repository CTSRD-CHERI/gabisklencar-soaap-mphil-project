# vim:syntax=python

import lit
import os
import sys


#
# Basic information about this test suite.
#
config.name = 'SOAAP'
config.suffixes = [ '.c', '.cc', '.cpp', '.ll' ]
config.excludes = [ 'Inputs' ]
config.test_format = lit.formats.ShTest()

#
# Useful environment variables.
#
srcdir = os.getenv('SOAAP_SOURCE_DIR')
if not srcdir:
	if not 'source_dir' in lit_config.params:
		raise Exception, ('Unable to find SOAAP source directory;' +
			' set SOAAP_SOURCE_DIR or pass --source_dir to lit')

	srcdir = lit_config.params['source_dir']

builddir = os.getenv('SOAAP_BUILD_DIR')
if not builddir:
	if not 'build_dir' in lit_config.params:
		raise Exception, ('Unable to find SOAAP build directory;' +
			' set SOAAP_BUILD_DIR or pass --build_dir to lit')

	builddir = lit_config.params['build_dir']


extra_cflags = [ '-g' ]     # always build tests with debug symbols
if 'extra_cflags' in lit_config.params:
	extra_cflags += lit_config.params['extra_cflags'].split()

extra_cxxflags = [ '-g' ]
extra_libs = []


if 'output_dir' in lit_config.params:
	config.test_exec_root = lit_config.params['output_dir']


#
# Site-specific configuration information (e.g. the host triple).
#
lit_config.load_config(config, builddir + '/tests/lit.site.cfg')


#
# Find the 'support' module (which may not be in the current PYTHONPATH).
#
sys.path.append(os.curdir)
if srcdir: sys.path.append(os.path.join(srcdir, 'tests'))

try:
	import support

except ImportError, e:
	print "Unable to find 'support' module!"
	print "Try setting SOAAP_SOURCE_DIR?"
	sys.exit(1)


#
# Find LLVM tools (e.g. FileCheck).
#
llvm_obj_root = support.llvm_config['obj-root']
llvm_tools = os.path.join(llvm_obj_root, 'bin')


#
# Find the SOAAP headers and libraries (system location or ${src,build}dir).
#
include_dir = support.find_include_dir('soaap.h',
	paths = [ os.path.join(srcdir, 'include') ],
	notfound_msg = 'Try setting SOAAP_SOURCE_DIR')

libdir = support.find_libdir('libSOAAP.*', [ os.path.join(builddir, 'lib') ],
	notfound_msg = 'Try setting SOAAP_BUILD_DIR')


#
# Set CFLAGS, LDFLAGS, PATH, etc.
#
config.substitutions += [
	('%cflags', support.cflags([ include_dir, '%p/Inputs' ],
	                        extra = extra_cflags)),
	('%cxxflags', support.cflags([ include_dir, '%p/Inputs' ],
	                          extra = extra_cxxflags)),
	('%ldflags', support.ldflags([ libdir ], [], extra_libs)),
	('%cpp_out', support.cpp_out()),
]

soaap_bin = os.path.join(srcdir, 'bin')

config.environment['PATH'] = os.path.pathsep.join([
	llvm_tools,
	soaap_bin,
	config.environment['PATH']
])

config.environment['LD_LIBRARY_PATH'] = libdir
config.environment['DYLD_LIBRARY_PATH'] = libdir
config.environment['SOAAP_BUILD_DIR'] = builddir
config.environment['SOAAP_SOURCE_DIR'] = srcdir
